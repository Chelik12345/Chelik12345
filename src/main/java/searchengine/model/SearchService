package com.example.service;
import java.util.*;
import java.util.stream.Collectors;

public class SearchService {

    private Set<String> stopWords;

    public SearchService(Set<String> stopWords) {
        this.stopWords = stopWords;
    }

    public List<String> getUniqueLemmas(String query) {
        String[] words = query.split("\\s+");
        return Arrays.stream(words)
                .map(this::lemmatize)
                .filter(word -> !stopWords.contains(word))
                .distinct()
                .collect(Collectors.toList());
    }

    private String lemmatize(String word) {
        // Пример лемматизации, можно использовать библиотеку NLP
        return word.toLowerCase();
    }
public List<String> filterFrequentLemmas(List<String> lemmas, Map<String, Integer> lemmaFrequency, int maxFrequencyPercentage) {
    int totalPages = lemmaFrequency.values().stream().mapToInt(Integer::intValue).sum();
    int maxFrequency = totalPages * maxFrequencyPercentage / 100;
    return lemmas.stream()
            .filter(lemma -> lemmaFrequency.getOrDefault(lemma, 0) < maxFrequency)
            .sorted(Comparator.comparingInt(lemmaFrequency::get))
            .collect(Collectors.toList());
}
public List<Page> searchPages(List<String> lemmas, Map<String, List<Page>> index) {
    Set<Page> resultPages = new HashSet<>(index.getOrDefault(lemmas.get(0), Collections.emptyList()));
    for (String lemma : lemmas) {
        resultPages.retainAll(index.getOrDefault(lemma, Collections.emptyList()));
        if (resultPages.isEmpty()) {
            return Collections.emptyList();
        }
    }
    return new ArrayList<>(resultPages);
}
public List<RelevantPage> calculateRelevance(List<Page> pages, Map<String, Map<Page, Double>> lemmaRanks) {
    double maxRelevance = 0.0;
    List<RelevantPage> relevantPages = new ArrayList<>();
    for (Page page : pages) {
        double relevance = 0.0;
        for (String lemma : lemmaRanks.keySet()) {
            relevance += lemmaRanks.get(lemma).getOrDefault(page, 0.0);
        }
        maxRelevance = Math.max(maxRelevance, relevance);
        relevantPages.add(new RelevantPage(page, relevance));
    }
    for (RelevantPage relevantPage : relevantPages) {
        relevantPage.setRelativeRelevance(relevantPage.getRelevance() / maxRelevance);
    }
    relevantPages.sort(Comparator.comparingDouble(RelevantPage::getRelativeRelevance).reversed());
    return relevantPages;
}
public String createSnippet(String content, List<String> queryWords) {
    int snippetLength = 300;
    String lowerContent = content.toLowerCase();
    int start = lowerContent.indexOf(queryWords.get(0));
    if (start == -1) {
        start = 0;
    }
    int end = Math.min(content.length(), start + snippetLength);
    String snippet = content.substring(start, end);
    for (String word : queryWords) {
        snippet = snippet.replaceAll("(?i)" + word, "<b>" + word + "</b>");
    }
    return snippet;
}
public List<SearchResult> search(String query, Map<String, List<Page>> index, Map<String, Map<Page, Double>> lemmaRanks, int maxFrequencyPercentage) {
    List<String> uniqueLemmas = getUniqueLemmas(query);
    List<String> filteredLemmas = filterFrequentLemmas(uniqueLemmas, lemmaRanks.keySet().stream().collect(Collectors.toMap(lemma -> lemma, lemma -> lemmaRanks.get(lemma).size())), maxFrequencyPercentage);
    List<Page> foundPages = searchPages(filteredLemmas, index);
    List<RelevantPage> relevantPages = calculateRelevance(foundPages, lemmaRanks);
    List<SearchResult> results = new ArrayList<>();
    for (RelevantPage relevantPage : relevantPages) {
        String snippet = createSnippet(relevantPage.getPage().getContent(), uniqueLemmas);
        results.add(new SearchResult(relevantPage.getPage().getUri(), relevantPage.getPage().getTitle(), snippet, relevantPage.getRelativeRelevance()));
    }
    return results;
}
}
